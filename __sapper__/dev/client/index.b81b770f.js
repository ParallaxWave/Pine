import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a as stores$1, b as validate_store, c as component_subscribe, e as space, f as element, t as text, q as query_selector_all, g as detach_dev, h as claim_space, j as claim_element, k as children, l as claim_text, m as attr_dev, n as set_style, o as add_location, p as insert_dev, r as append_dev, u as noop } from './client.9205e543.js';

/* src/routes/index.svelte generated by Svelte v3.31.2 */
const file = "src/routes/index.svelte";

function create_fragment(ctx) {
	let t0;
	let div2;
	let div1;
	let div0;
	let t1;
	let br;
	let t2;
	let span;
	let t3;
	let b;
	let t4;
	let t5;

	const block = {
		c: function create() {
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			t1 = text("chat");
			br = element("br");
			t2 = space();
			span = element("span");
			t3 = text("Welcome to your chats ");
			b = element("b");
			t4 = text(/*username*/ ctx[1]);
			t5 = text("!");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1anpopb\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			t1 = claim_text(div0_nodes, "chat");
			div0_nodes.forEach(detach_dev);
			br = claim_element(div1_nodes, "BR", {});
			t2 = claim_space(div1_nodes);
			span = claim_element(div1_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t3 = claim_text(span_nodes, "Welcome to your chats ");
			b = claim_element(span_nodes, "B", {});
			var b_nodes = children(b);
			t4 = claim_text(b_nodes, /*username*/ ctx[1]);
			b_nodes.forEach(detach_dev);
			t5 = claim_text(span_nodes, "!");
			span_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Home";
			attr_dev(div0, "class", "material-icons text-4xl text-gray-500 font-bold");
			set_style(div0, "font-size", "18vw");
			add_location(div0, file, 15, 6, 310);
			add_location(br, file, 15, 102, 406);
			add_location(b, file, 17, 30, 495);
			attr_dev(span, "class", "text-4xl text-gray-500 font-sans");
			add_location(span, file, 16, 6, 417);
			attr_dev(div1, "class", "justify-self-center text-center mt-5 w-1/2 p-8");
			add_location(div1, file, 14, 4, 243);
			attr_dev(div2, "class", "grid justify-items-stretch");
			add_location(div2, file, 13, 2, 198);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div0, t1);
			append_dev(div1, br);
			append_dev(div1, t2);
			append_dev(div1, span);
			append_dev(span, t3);
			append_dev(span, b);
			append_dev(b, t4);
			append_dev(span, t5);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $session;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	const { session } = stores$1();
	validate_store(session, "session");
	component_subscribe($$self, session, value => $$invalidate(2, $session = value));
	let username = $session.username;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ stores: stores$1, session, username, $session });

	$$self.$inject_state = $$props => {
		if ("username" in $$props) $$invalidate(1, username = $$props.username);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [session, username];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYjgxYjc3MGYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IHN0b3JlcyB9IGZyb20gJ0BzYXBwZXIvYXBwJztcbiAgY29uc3QgeyBzZXNzaW9uIH0gPSBzdG9yZXMoKVxuICBsZXQgdXNlcm5hbWUgPSAkc2Vzc2lvbi51c2VybmFtZTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5Ib21lPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbiAgPGRpdiBjbGFzcz1cImdyaWQganVzdGlmeS1pdGVtcy1zdHJldGNoXCI+XG4gICAgPGRpdiBjbGFzcz1cImp1c3RpZnktc2VsZi1jZW50ZXIgdGV4dC1jZW50ZXIgbXQtNSB3LTEvMiBwLThcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtYXRlcmlhbC1pY29ucyB0ZXh0LTR4bCB0ZXh0LWdyYXktNTAwIGZvbnQtYm9sZFwiIHN0eWxlPVwiZm9udC1zaXplOiAxOHZ3O1wiPmNoYXQ8L2Rpdj48YnI+XG4gICAgICA8c3BhbiBjbGFzcz1cInRleHQtNHhsIHRleHQtZ3JheS01MDAgZm9udC1zYW5zXCI+XG4gICAgICAgIFdlbGNvbWUgdG8geW91ciBjaGF0cyA8Yj57dXNlcm5hbWV9PC9iPiEgXG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuXG4iXSwibmFtZXMiOlsic3RvcmVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQWlCa0MsR0FBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUNBQVIsR0FBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBZmhDLE9BQU8sS0FBS0EsUUFBTTs7O0tBQ3RCLFFBQVEsR0FBRyxRQUFRLENBQUMsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
