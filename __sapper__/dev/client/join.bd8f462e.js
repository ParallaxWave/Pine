import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a as stores$1, b as validate_store, c as component_subscribe, e as space, f as element, t as text, q as query_selector_all, g as detach_dev, h as claim_space, j as claim_element, k as children, l as claim_text, m as attr_dev, n as set_style, o as add_location, p as insert_dev, r as append_dev, u as noop } from './client.5f7e45b8.js';

/* src/routes/join.svelte generated by Svelte v3.31.2 */
const file = "src/routes/join.svelte";

function create_fragment(ctx) {
	let t0;
	let div3;
	let div2;
	let div0;
	let t1;
	let br;
	let t2;
	let span;
	let t3;
	let b;
	let t4;
	let t5;
	let t6;
	let div1;
	let a0;
	let t7;
	let t8;
	let a1;
	let t9;
	let t10;
	let a2;
	let t11;

	const block = {
		c: function create() {
			t0 = space();
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			t1 = text("chat");
			br = element("br");
			t2 = space();
			span = element("span");
			t3 = text("Welcome to your chats ");
			b = element("b");
			t4 = text(/*username*/ ctx[1]);
			t5 = text("!");
			t6 = space();
			div1 = element("div");
			a0 = element("a");
			t7 = text("Join a Group");
			t8 = space();
			a1 = element("a");
			t9 = text("Create a Group");
			t10 = space();
			a2 = element("a");
			t11 = text("Direct Messaging");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1anpopb\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			t1 = claim_text(div0_nodes, "chat");
			div0_nodes.forEach(detach_dev);
			br = claim_element(div2_nodes, "BR", {});
			t2 = claim_space(div2_nodes);
			span = claim_element(div2_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t3 = claim_text(span_nodes, "Welcome to your chats ");
			b = claim_element(span_nodes, "B", {});
			var b_nodes = children(b);
			t4 = claim_text(b_nodes, /*username*/ ctx[1]);
			b_nodes.forEach(detach_dev);
			t5 = claim_text(span_nodes, "!");
			span_nodes.forEach(detach_dev);
			t6 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			a0 = claim_element(div1_nodes, "A", { class: true, href: true });
			var a0_nodes = children(a0);
			t7 = claim_text(a0_nodes, "Join a Group");
			a0_nodes.forEach(detach_dev);
			t8 = claim_space(div1_nodes);
			a1 = claim_element(div1_nodes, "A", { class: true, href: true });
			var a1_nodes = children(a1);
			t9 = claim_text(a1_nodes, "Create a Group");
			a1_nodes.forEach(detach_dev);
			t10 = claim_space(div1_nodes);
			a2 = claim_element(div1_nodes, "A", { class: true, href: true });
			var a2_nodes = children(a2);
			t11 = claim_text(a2_nodes, "Direct Messaging");
			a2_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Home";
			attr_dev(div0, "class", "material-icons text-4xl text-gray-500 font-bold");
			set_style(div0, "font-size", "18vw");
			add_location(div0, file, 15, 6, 310);
			add_location(br, file, 15, 102, 406);
			add_location(b, file, 17, 30, 495);
			attr_dev(span, "class", "text-4xl text-gray-500 font-sans");
			add_location(span, file, 16, 6, 417);
			attr_dev(a0, "class", "col-span-1 text-gray-500 p-2 rounded-md hover:text-gray-400 focus:outline-none");
			attr_dev(a0, "href", "chat");
			add_location(a0, file, 20, 8, 594);
			attr_dev(a1, "class", "col-span-1 text-gray-500 p-2 rounded-md hover:text-gray-400 focus:outline-none");
			attr_dev(a1, "href", "chat");
			add_location(a1, file, 21, 8, 721);
			attr_dev(a2, "class", "col-span-1 text-gray-500 p-2 rounded-md hover:text-gray-400 focus:outline-none");
			attr_dev(a2, "href", "chat");
			add_location(a2, file, 22, 8, 850);
			attr_dev(div1, "class", "grid grid-cols-3 gap-4 text-md mt-24");
			add_location(div1, file, 19, 6, 535);
			attr_dev(div2, "class", "justify-self-center text-center mt-5 w-5/6 p-8");
			add_location(div2, file, 14, 4, 243);
			attr_dev(div3, "class", "grid justify-items-stretch");
			add_location(div3, file, 13, 2, 198);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, div2);
			append_dev(div2, div0);
			append_dev(div0, t1);
			append_dev(div2, br);
			append_dev(div2, t2);
			append_dev(div2, span);
			append_dev(span, t3);
			append_dev(span, b);
			append_dev(b, t4);
			append_dev(span, t5);
			append_dev(div2, t6);
			append_dev(div2, div1);
			append_dev(div1, a0);
			append_dev(a0, t7);
			append_dev(div1, t8);
			append_dev(div1, a1);
			append_dev(a1, t9);
			append_dev(div1, t10);
			append_dev(div1, a2);
			append_dev(a2, t11);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $session;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Join", slots, []);
	const { session } = stores$1();
	validate_store(session, "session");
	component_subscribe($$self, session, value => $$invalidate(2, $session = value));
	let username = $session.username;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Join> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ stores: stores$1, session, username, $session });

	$$self.$inject_state = $$props => {
		if ("username" in $$props) $$invalidate(1, username = $$props.username);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [session, username];
}

class Join extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Join",
			options,
			id: create_fragment.name
		});
	}
}

export default Join;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbi5iZDhmNDYyZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9qb2luLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgeyBzdG9yZXMgfSBmcm9tICdAc2FwcGVyL2FwcCc7XG4gIGNvbnN0IHsgc2Vzc2lvbiB9ID0gc3RvcmVzKClcbiAgbGV0IHVzZXJuYW1lID0gJHNlc3Npb24udXNlcm5hbWU7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuPC9zdHlsZT5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+SG9tZTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG4gIDxkaXYgY2xhc3M9XCJncmlkIGp1c3RpZnktaXRlbXMtc3RyZXRjaFwiPlxuICAgIDxkaXYgY2xhc3M9XCJqdXN0aWZ5LXNlbGYtY2VudGVyIHRleHQtY2VudGVyIG10LTUgdy01LzYgcC04XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwibWF0ZXJpYWwtaWNvbnMgdGV4dC00eGwgdGV4dC1ncmF5LTUwMCBmb250LWJvbGRcIiBzdHlsZT1cImZvbnQtc2l6ZTogMTh2dztcIj5jaGF0PC9kaXY+PGJyPlxuICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LTR4bCB0ZXh0LWdyYXktNTAwIGZvbnQtc2Fuc1wiPlxuICAgICAgICBXZWxjb21lIHRvIHlvdXIgY2hhdHMgPGI+e3VzZXJuYW1lfTwvYj4hIFxuICAgICAgPC9zcGFuPlxuICAgICAgPGRpdiBjbGFzcz1cImdyaWQgZ3JpZC1jb2xzLTMgZ2FwLTQgdGV4dC1tZCBtdC0yNFwiPlxuICAgICAgICA8YSBjbGFzcz1cImNvbC1zcGFuLTEgdGV4dC1ncmF5LTUwMCBwLTIgcm91bmRlZC1tZCBob3Zlcjp0ZXh0LWdyYXktNDAwIGZvY3VzOm91dGxpbmUtbm9uZVwiIGhyZWY9XCJjaGF0XCI+Sm9pbiBhIEdyb3VwPC9hPlxuICAgICAgICA8YSBjbGFzcz1cImNvbC1zcGFuLTEgdGV4dC1ncmF5LTUwMCBwLTIgcm91bmRlZC1tZCBob3Zlcjp0ZXh0LWdyYXktNDAwIGZvY3VzOm91dGxpbmUtbm9uZVwiIGhyZWY9XCJjaGF0XCI+Q3JlYXRlIGEgR3JvdXA8L2E+XG4gICAgICAgIDxhIGNsYXNzPVwiY29sLXNwYW4tMSB0ZXh0LWdyYXktNTAwIHAtMiByb3VuZGVkLW1kIGhvdmVyOnRleHQtZ3JheS00MDAgZm9jdXM6b3V0bGluZS1ub25lXCIgaHJlZj1cImNoYXRcIj5EaXJlY3QgTWVzc2FnaW5nPC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuXG4iXSwibmFtZXMiOlsic3RvcmVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFpQmtDLEdBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5Q0FBUixHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7U0FmaEMsT0FBTyxLQUFLQSxRQUFNOzs7S0FDdEIsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
